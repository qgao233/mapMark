<template>
  <view class="container">
    <!-- 添加状态栏渐变遮罩 -->
    <cover-view class="status-bar-mask"></cover-view>
    
    <!-- 搜索框 -->
    <cover-view 
      class="search-container"
      :class="{ 'search-container-hidden': isSearchPopupOpen }"
      v-if="!isSearchBoxHidden"
      @click="openLocationChooser"
    >
        <cover-image 
          class="search-icon" 
          :src="images.search"
        ></cover-image>
        <cover-view class="search-placeholder">搜索地点</cover-view>
    </cover-view>

    <!-- 地图组件 -->
    <map
      id="map1"
      class="map"
      :latitude="mapState.center.latitude"
      :longitude="mapState.center.longitude"
      :markers="displayMarkers"
      :scale="mapState.zoom"
      show-location="false"
      @markertap="onMarkerTap"
      @callouttap="onMarkerTap"
      @tap="onMapTap"
      :enable-3D="true"
      :show-compass="true"
      :enable-rotate="true"
    ></map>

    <!-- 定位按钮 -->
    <cover-view 
      class="float-btn location-btn"
      @click="moveToCurrentLocation"
      v-if="!isAnyPopupOpen"
    >
      <cover-image 
        class="btn-icon" 
        :src="images.location"
      ></cover-image>
    </cover-view>

    <!-- 创建模式指示器 -->
    <cover-view v-if="isCreatingMode" class="creating-indicator">
      <cover-view class="indicator-text">移动或点击地图选择标记位置</cover-view>
      <cover-view class="indicator-buttons">
        <cover-view class="cancel-btn" @click="cancelCreating">取消</cover-view>
        <cover-view class="confirm-btn" @click="confirmLocation">确定</cover-view>
      </cover-view>
    </cover-view>

    <!-- 添加按钮 -->
    <cover-view 
      v-if="!isCreatingMode && !isAnyPopupOpen"
      class="float-btn add-btn"
      @click="startCreating"
    >
      <cover-image 
        class="btn-icon" 
        :src="images.add"
      ></cover-image>
    </cover-view>

    <!-- 创建标记弹窗 -->
    <uni-popup ref="createPopup" type="bottom" @maskClick="cancelCreate">
      <marker-edit-content
        v-model="newMarker"
        title="创建新标记"
        confirm-text="确定"
        @confirm="confirmCreate"
        @cancel="cancelCreate"
      />
    </uni-popup>

    <!-- 编辑标记弹窗 -->
    <uni-popup ref="editPopup" type="bottom" @maskClick="cancelEdit">
      <marker-edit-content
        v-model="editingMarker"
        title="编辑标记"
        confirm-text="保存"
        :show-delete="true"
        @confirm="confirmEdit"
        @cancel="cancelEdit"
        @delete="deleteMarker"
      />
    </uni-popup>

    <!-- 删除确认弹窗 -->
    <uni-popup ref="deleteConfirmPopup" type="dialog" @maskClick="cancelDelete">
      <uni-popup-dialog
        type="warning"
        title="删除标记"
        content="确定删除这个标记吗？此操作不可撤销。"
        :duration="2000"
        :before-close="true"
        @confirm="confirmDelete"
        @close="cancelDelete"
      ></uni-popup-dialog>
    </uni-popup>

    <!-- 添加中心标记 cover-view -->
    <cover-view 
      v-if="isCreatingMode" 
      class="center-marker"
    >
      <cover-image 
        class="marker-icon"
        :src="images.marker"
      ></cover-image>
    </cover-view>
  </view>
</template>

<script>
import { ref, computed, onMounted, onBeforeUnmount,getCurrentInstance } from 'vue'
import { useStore } from 'vuex'
import MarkerEditContent from '@/components/marker-edit-content.vue'
import { 
  MARKER_CATEGORIES, 
  MARKER_TAGS,
  getCategoryByValue 
} from '@/utils/constants'

// 修改静态资源配置，添加 marker 图标
const staticImages = {
  search: '/static/images/search.png',
  location: '/static/images/location.png',
  add: '/static/images/add.png',
  marker: '/static/images/markers/marker.png' // 新增 marker 图标路径
}

export default {
  components: {
    MarkerEditContent
  },
  setup() {
    // store
    const store = useStore()

    // refs
    const createPopup = ref(null)
    const editPopup = ref(null)
    const deleteConfirmPopup = ref(null)
    
    // 弹窗状态
    const isCreatePopupOpen = ref(false)
    const isEditPopupOpen = ref(false)
    const isDeletePopupOpen = ref(false)

    // 创建模式状态
    const isCreatingMode = ref(false)

    // 地图状态
    const mapState = computed(() => store.state.map)

    // 新标记数据
    const newMarker = ref({
      title: '',
      description: '',
      location: null,
      category: '',
      tags: [],
      createTime: 0,
      updateTime: 0
    })

    // 编辑中的标记数据
    const editingMarker = ref({
      id: '',
      title: '',
      description: '',
      location: null,
      category: '',
      tags: [],
      createTime: 0,
      updateTime: 0
    })

    // 处理后的标记点数据
    const displayMarkers = computed(() => {
      return store.state.markers.items.map(marker => ({
        id: marker.id,
        latitude: marker.location.latitude,
        longitude: marker.location.longitude,
        title: marker.title,
        iconPath: getCategoryByValue(marker.category)?.iconPath, // 使用变量替代硬编码路径
        width: 32,
        height: 32,
        callout: {
          content: marker.title,
          color: '#000000',
          fontSize: 14,
          borderRadius: 4,
          padding: 8,
          display: 'ALWAYS',
          bgColor: '#ffffff'
        }
      }))
    })

    // 是否有任何弹窗打开
    const isAnyPopupOpen = computed(() => {
      return isCreatePopupOpen.value || 
             isEditPopupOpen.value || 
             isDeletePopupOpen.value
    })

    // 地图是否正在被用户操作
    const isMapMoving = ref(false)
    
    // 是否跟随定位
    const isFollowingLocation = ref(true)

    // 移除原有的搜索相关状态和方法
    const isSearchPopupOpen = ref(false)
    const isSearchBoxHidden = ref(false)

    // 添加地图上下文引用
    const mapContext = ref(null)

    // 方法定义...
    const startCreating = () => {
      isCreatingMode.value = true
    }

    const cancelCreating = () => {
      isCreatingMode.value = false
    }

    const onMapTap = async (e) => {
      if (!isCreatingMode.value) return
      
      // 获取最近的 POI
      const nearestPOI = await getNearestPOI({
        latitude: e.detail.latitude,
        longitude: e.detail.longitude
      })
      
      newMarker.value = {
        title: nearestPOI?.name || '',
        description: nearestPOI?.address || '',
        location: {
          latitude: e.detail.latitude,
          longitude: e.detail.longitude
        },
        poi: nearestPOI, // 保存完整的 POI 信息
        category: 'marker',
        tags: [],
        createTime: 0,
        updateTime: 0
      }
      
      isCreatingMode.value = false
      createPopup.value.open()
      isCreatePopupOpen.value = true
    }

    const onMarkerTap = (e) => {
      if (isCreatingMode.value) return
      
      const markerId = e.detail.markerId
      const marker = store.state.markers.items.find(m => m.id === markerId)
      
      if (!marker) return

      editingMarker.value = marker
      editPopup.value.open()
      isEditPopupOpen.value = true
    }

    const cancelCreate = () => {
      createPopup.value.close()
      isCreatePopupOpen.value = false
      newMarker.value = {
        title: '',
        description: '',
        location: null,
        poi: null,
        category: '',
        tags: [],
        createTime: 0,
        updateTime: 0
      }
    }

    const confirmCreate = async () => {
      if (!newMarker.value.title) {
        uni.showToast({
          title: '请输入标题',
          icon: 'none'
        })
        return
      }

      // 检查标题是否已存在
      if (store.getters.isTitleExists(newMarker.value.title)) {
        uni.showToast({
          title: '标题已存在',
          icon: 'none'
        })
        return
      }

      try {
        await store.dispatch('createMarker', {
          ...newMarker.value,
          createTime: Date.now(),
          updateTime: Date.now()
        })
        
        createPopup.value.close()
        isCreatePopupOpen.value = false
        newMarker.value = {
          title: '',
          description: '',
          location: null,
          poi: null,
          category: '',
          tags: [],
          createTime: 0,
          updateTime: 0
        }
        
        uni.showToast({
          title: '创建成功',
          icon: 'success'
        })
      } catch (error) {
        console.error('创建标记失败:', error)
        uni.showToast({
          title: '创建失败',
          icon: 'error'
        })
      }
    }

    const onTitleInput = (e) => {
      newMarker.value.title = e.detail.value.trim()
    }

    // 获取当前位置
    const getCurrentLocation = () => {
      return new Promise((resolve, reject) => {
        uni.getLocation({
          type: 'gcj02',
          isHighAccuracy: true,
          success: res => {
            console.log('当前位置:', res)
            resolve({
              latitude: res.latitude,
              longitude: res.longitude
            })
          },
          fail: err => {
            console.error('获取位置失败:', err)
            resolve({
              latitude: 39.909,
              longitude: 116.397
            })
          }
        })
      })
    }

    // 移动到当前位置并更新标记
    const moveToCurrentLocation = async () => {
      try {
        // 显示加载提示
        uni.showLoading({
          title: '定位中...',
          mask: true
        })

        // 获取当前位置
        const location = await getCurrentLocation()
        
        
        // 更新地图中心点
        store.commit('SET_MAP_CENTER', location)

        uni.hideLoading()
      } catch (error) {
        console.error('定位失败:', error)
        uni.showToast({
          title: '定位失败',
          icon: 'error'
        })
      }
    }

    // 取消编辑
    const cancelEdit = () => {
      editPopup.value.close()
      isEditPopupOpen.value = false
      editingMarker.value = {
        id: '',
        title: '',
        description: '',
        location: null,
        poi: null,
        category: '',
        tags: [],
        createTime: 0,
        updateTime: 0
      }
    }

    // 确认编辑
    const confirmEdit = async () => {
      if (!editingMarker.value.title) {
        uni.showToast({
          title: '请输入标题',
          icon: 'none'
        })
        return
      }

      // 检查标题是否已存在(排除当前编辑的标记)
      if (store.getters.isTitleExists(editingMarker.value.title, editingMarker.value.id)) {
        uni.showToast({
          title: '标题已存在',
          icon: 'none'
        })
        return
      }

      try {
        await store.dispatch('updateMarker', {
          ...editingMarker.value,
          updateTime: Date.now()
        })
        
        editPopup.value.close()
        isEditPopupOpen.value = false
        uni.showToast({
          title: '更新成功',
          icon: 'success'
        })
      } catch (error) {
        console.error('更新标记失败:', error)
        uni.showToast({
          title: '更新失败',
          icon: 'error'
        })
      }
    }

    // 删除标记
    const deleteMarker = () => {
      deleteConfirmPopup.value.open()
      isDeletePopupOpen.value = true
    }

    // 确认删除
    const confirmDelete = async () => {
      try {
        await store.dispatch('deleteMarker', editingMarker.value.id)
        deleteConfirmPopup.value.close()
        isDeletePopupOpen.value = false
        editPopup.value.close()
        isEditPopupOpen.value = false
        uni.showToast({
          title: '删除成功',
          icon: 'success'
        })
      } catch (error) {
        console.error('删除标记失败:', error)
        uni.showToast({
          title: '删除失败',
          icon: 'error'
        })
      }
    }

    // 取消删除
    const cancelDelete = () => {
      deleteConfirmPopup.value.close()
      isDeletePopupOpen.value = false
    }

    // 打开地点选择器
    const openLocationChooser = async () => {
      try {
        const location = await uni.chooseLocation()
        console.log('选择的位置:', location)
        
        // 更新地图中心点
        store.commit('SET_MAP_CENTER', {
          latitude: location.latitude,
          longitude: location.longitude
        })

        // 如果在创建模式下，自动填充位置并打开创建弹窗
        if (isCreatingMode.value) {
          newMarker.value = {
            title: location.name || '',
            description: location.address || '',
            location: {
              latitude: location.latitude,
              longitude: location.longitude
            },
            poi: location,
            category: 'marker',
            tags: [],
            createTime: 0,
            updateTime: 0
          }
          createPopup.value.open()
          isCreatePopupOpen.value = true
          isCreatingMode.value = false
        }
      } catch (error) {
        console.log('取消选择位置或发生错误:', error)
      }
    }

    // 初始化
    onMounted(() => {
      // 初始化时获取一次位置
      moveToCurrentLocation()
      mapContext.value = uni.createMapContext("map1", getCurrentInstance().proxy)
    })

    // 移除定时器相关代码
    onBeforeUnmount(() => {
      // 清理代码...
    })

    // 确认位置
    const confirmLocation = async () => {
      try {
        const location = await new Promise((resolve, reject) => {
          mapContext.value?.getCenterLocation({
            success: res => resolve(res),
            fail: err => reject(err)
          })
        })
        
        // 获取最近的 POI
        const nearestPOI = await getNearestPOI({
          latitude: location.latitude,
          longitude: location.longitude
        })
        
        newMarker.value = {
          title: nearestPOI?.name || '',
          description: nearestPOI?.address || '',
          location: {
            latitude: location.latitude,
            longitude: location.longitude
          },
          poi: nearestPOI, // 保存完整的 POI 信息
          category: 'marker',
          tags: [],
          createTime: 0,
          updateTime: 0
        }
        
        isCreatingMode.value = false
        createPopup.value.open()
        isCreatePopupOpen.value = true
      } catch (error) {
        console.error('获取中心位置失败:', error)
        uni.showToast({
          title: '获取位置失败',
          icon: 'error'
        })
      }
    }

    /**
     * 获取指定位置最近的 POI
     * @param {Object} location 位置对象 {latitude: number, longitude: number}
     * @returns {Promise<Object|null>} 返回最近的 POI 信息，如果没有找到则返回 null
     */
    const getNearestPOI = async (location) => {
      try {
        // 显示加载提示
        uni.showLoading({
          title: '获取位置信息...',
          mask: true
        })

        // 先将地图中心移动到指定位置
        store.commit('SET_MAP_CENTER', location)
        
        // 等待地图更新完成
        await new Promise(resolve => setTimeout(resolve, 200))

        // 调用 chooseLocation 获取周边 POI
        const poi = await uni.chooseLocation({
          latitude: location.latitude,
          longitude: location.longitude
        }).catch(err => {
          console.log('���户取消选择或发生错误:', err)
          return null
        })

        // 隐藏加载提示
        uni.hideLoading()

        if (!poi) {
          return null
        }

        // 计算 POI 到指定位置的距离
        const distance = calculateDistance(
          location.latitude,
          location.longitude,
          poi.latitude,
          poi.longitude
        )

        // 如果距离超过 200 米，认为不是最近的 POI
        //if (distance > 200) {
        //  return null
        //}

        return {
          name: poi.name,
          address: poi.address,
          latitude: poi.latitude,
          longitude: poi.longitude,
          distance: distance
        }
      } catch (error) {
        console.error('获取 POI 失败:', error)
        uni.hideLoading()
        uni.showToast({
          title: '获取位置信息失败',
          icon: 'none'
        })
        return null
      }
    }

    /**
     * 计算两个坐标点之间的距离（米）
     * @param {number} lat1 第一个点的纬度
     * @param {number} lon1 第一个点的经度
     * @param {number} lat2 第二个点的纬度
     * @param {number} lon2 第二个点的经度
     * @returns {number} 距离（米）
     */
    const calculateDistance = (lat1, lon1, lat2, lon2) => {
      const R = 6371000 // 地球半径（米）
      const dLat = (lat2 - lat1) * Math.PI / 180
      const dLon = (lon2 - lon1) * Math.PI / 180
      const a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
        Math.sin(dLon/2) * Math.sin(dLon/2)
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
      return R * c
    }

    return {
      createPopup,
      isCreatingMode,
      mapState,
      newMarker,
      displayMarkers,
      startCreating,
      cancelCreating,
      onMapTap,
      onMarkerTap,
      cancelCreate,
      confirmCreate,
      onTitleInput,
      moveToCurrentLocation,
      editPopup,
      deleteConfirmPopup,
      editingMarker,
      cancelEdit,
      confirmEdit,
      deleteMarker,
      confirmDelete,
      cancelDelete,
      openLocationChooser,
      isSearchPopupOpen,
      isSearchBoxHidden,
      isAnyPopupOpen,
      images: staticImages,
      confirmLocation,
      getNearestPOI,
      calculateDistance
    }
  }
}
</script>

<style lang="scss">
.container {
  flex: 1;
  position: relative;
  flex-direction: column;
}

.map {
  width: 100vw;//不允许动
  height: 100vh;//不允许动
  position: absolute;
  top: 0;
  left: 0;
}

// 创建模式指示器
.creating-indicator {
  position: fixed;
  top: 100px; // 调整位置，避免异形屏遮挡
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 0.75);
  border-radius: 30px;
  padding: 12px 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);

  .indicator-text {
    color: #ffffff;
    font-size: 15px;
    margin-bottom: 12px;
    font-weight: 500;
  }

  .indicator-buttons {
    display: flex;
    flex-direction: row;
    gap: 12px;

    .cancel-btn,
    .confirm-btn {
      background-color: rgba(255, 255, 255, 0.2);
      color: #ffffff;
      padding: 6px 12px;
      border-radius: 15px;
      font-size: 13px;
    }

    .confirm-btn {
      background-color: #007AFF;
    }
  }
}

// 浮动按钮基础样式
.float-btn {
  position: fixed;
  right: 20px;
  width: 44px;
  height: 44px;
  border-radius: 22px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.9);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
  
  &:active {
    transform: scale(0.95);
    background-color: rgba(255, 255, 255, 0.95);
  }

  .btn-icon {
    width: 20px;
    height: 20px;
  }
}

// 定位按钮位置
.location-btn {
  bottom: 130px;
}

// 添加按钮位置
.add-btn {
  bottom: 70px;
}


// 搜索框样式
.search-container {
  position: fixed;
  top: 44px;
  left: 0;
  right: 0;
  z-index: 100;
  margin: 0 100px 12px 16px;
  border-radius: 30px;

  background: linear-gradient(to bottom, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.8) 100%);
  transition-property: opacity, transform;
  transition-duration: 0.3s;
  opacity: 1;
  transform: translateY(0);

  display: flex;//不要动
  flex-direction: row;
  align-items: center;
  background-color: #f5f5f5;
  height: 44px;
  line-height: 44px;

  .search-icon {
    width: 16px;
    height: 16px;
    margin: 0 8px;
  }

  .search-input,
  .search-placeholder {
    flex: 1;
    font-size: 14px;
    color: #333;

  }

  .search-placeholder {
    color: #999;
  }
}

.search-container-hidden {
  opacity: 0;
  transform: translateY(-10px);
}

// 调整弹窗层级
:deep(.uni-popup) {
  z-index: 99;
  
  &.uni-popup-dialog {
    z-index: 999 !important;
  }
}

.status-bar-mask {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 44px;
  background: linear-gradient(to bottom, rgba(0,0,0,0.2) 0%, transparent 100%);
  z-index: 99;
  pointer-events: none;
}

// 添加中心标记样式
.center-marker {
  position: fixed;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -100%);
  width: 32px;
  height: 32px;
  z-index: 90;
  
  .marker-icon {
    width: 100%;
    height: 100%;
  }
}

</style>